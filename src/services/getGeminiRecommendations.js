import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

export const getRecommendations = async (cartItems, allBundles = []) => {
  // 1. ŒïŒæŒ±Œ≥œâŒ≥ŒÆ ŒªŒØœÉœÑŒ±œÇ œÄœÅŒøœäœåŒΩœÑœâŒΩ œÑŒøœÖ Œ∫Œ±ŒªŒ±Œ∏ŒπŒøœç
  const productList = cartItems.flatMap(item => item.products);
  const productText = productList.join(", ");

  // 2. ŒïŒæŒ±Œ≥œâŒ≥ŒÆ œÄŒπŒ∏Œ±ŒΩœéŒΩ œåœÅœâŒΩ œÉœçŒ≥Œ∫œÅŒπœÉŒ∑œÇ Œ≥ŒπŒ± œÉœÖŒΩŒ¨œÜŒµŒπŒ±
  const keywords = productList
    .map((p) => p.split(" ")[0]) // œÄœÅœéœÑŒø keyword Œ±œÄœå Œ∫Œ¨Œ∏Œµ œÑŒØœÑŒªŒø
    .filter(Boolean);

  // 3. Œ¶ŒπŒªœÑœÅŒ¨œÅŒπœÉŒºŒ± bundles ŒºŒµ ŒªŒ≠ŒæŒµŒπœÇ-Œ∫ŒªŒµŒπŒ¥ŒπŒ¨ Œ≥ŒπŒ± œÉœáŒµœÑŒπŒ∫œåœÑŒ∑œÑŒ±
  const relevantBundles = allBundles.filter((bundle) =>
    keywords.some((kw) =>
      bundle["Suggested Bundle Title"].toLowerCase().includes(kw.toLowerCase())
    )
  );

  const limitedBundles = relevantBundles.slice(0, 100); // Œ≥ŒπŒ± Œ±œÉœÜŒ¨ŒªŒµŒπŒ± token

  // 4. ŒîŒ∑ŒºŒπŒøœÖœÅŒ≥ŒØŒ± ŒªŒØœÉœÑŒ±œÇ bundles œÉŒµ ŒºŒøœÅœÜŒÆ prompt
  const availableBundleList = limitedBundles
    .map(
      (b, i) =>
        `${i + 1}. [${b.BundleType}] ${b["Suggested Bundle Title"]} ‚Äì ‚Ç¨${b.FinalPrice.toFixed(2)}`
    )
    .join("\n");

  // 5. Prompt œÄœÅŒøœÇ Gemini
  const prompt = `
ŒàŒΩŒ±œÇ œÄŒµŒªŒ¨œÑŒ∑œÇ Œ≠œáŒµŒπ œÉœÑŒø Œ∫Œ±ŒªŒ¨Œ∏Œπ œÑŒøœÖ œÑŒ± ŒµŒæŒÆœÇ œÄœÅŒøœäœåŒΩœÑŒ±:
${productText}

ŒëœÄœå œÑŒ± œÄŒ±œÅŒ±Œ∫Œ¨œÑœâ Œ¥ŒπŒ±Œ∏Œ≠œÉŒπŒºŒ± bundles, œÄœÅœåœÑŒµŒπŒΩŒµ 3 œÄŒøœÖ œÑŒ±ŒπœÅŒπŒ¨Œ∂ŒøœÖŒΩ œÄœÅŒ±Œ≥ŒºŒ±œÑŒπŒ∫Œ¨ ŒºŒµ Œ≤Œ¨œÉŒ∑:
- Œ∫ŒøŒπŒΩœå brand ŒÆ œÄœÅŒøœäœåŒΩ
- œÄŒ±œÅœåŒºŒøŒπŒ± œáœÅŒÆœÉŒ∑ ŒÆ Œ∫Œ±œÑŒ∑Œ≥ŒøœÅŒØŒ±
- Œ±œÄœåŒªœÖœÑŒ∑ œÉœÖŒΩŒ¨œÜŒµŒπŒ± ŒºŒµ œÑŒø Œ∫Œ±ŒªŒ¨Œ∏Œπ œÑŒøœÖ

‚ùó ŒúŒóŒù ŒµœÜŒµœÖœÅŒØœÉŒ∫ŒµŒπœÇ ŒΩŒ≠Œ± œÄœÅŒøœäœåŒΩœÑŒ± ŒÆ bundles. ŒîŒπŒ¨ŒªŒµŒæŒµ **ŒºœåŒΩŒø** Œ±œÄœå œÑŒ± œÄŒ±œÅŒ±Œ∫Œ¨œÑœâ.

ŒúŒ∑ œáœÅŒ∑œÉŒπŒºŒøœÄŒøŒπŒµŒØœÇ œÑŒ∑ ŒªŒ≠ŒæŒ∑ ŒîœéœÅŒø œÉœÑŒøŒΩ œÑŒØœÑŒªŒø.

ŒëœÄŒ¨ŒΩœÑŒ∑œÉŒµ Œ±œÖœÉœÑŒ∑œÅŒ¨ œÉŒµ JSON array:
[
  {
    "title": "Bundle Title",
    "products": ["Product A", "Product B"],
    "price": 19.99
  }
]

üì¶ ŒîŒπŒ±Œ∏Œ≠œÉŒπŒºŒ± Bundles:
${availableBundleList}
`;

  try {
    console.log("üß† Gemini Prompt:\n", prompt);

    const result = await model.generateContent(prompt);
    const text = await result.response.text();

    // ŒïŒæŒ±Œ≥œâŒ≥ŒÆ JSON Œ±œÄœå œÑŒ∑ŒΩ Œ±œÄŒ¨ŒΩœÑŒ∑œÉŒ∑
    const start = text.indexOf("[");
    const end = text.lastIndexOf("]") + 1;
    const jsonString = text.slice(start, end);

    const parsed = JSON.parse(jsonString);

    // Œ†œÅŒøœÉŒ∏ŒÆŒ∫Œ∑ backup œÑŒπŒºŒÆœÇ Œ±ŒΩ ŒªŒµŒØœÄŒµŒπ
    return parsed.map((bundle) => ({
      ...bundle,
      price: bundle.price ?? 29.99,
    }));
  } catch (e) {
    console.error("‚ùå Gemini parsing failed:", e);
    return [];
  }
};
